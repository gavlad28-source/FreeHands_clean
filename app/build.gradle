plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android' version '2.2.0'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android' version '2.50'
    id 'androidx.navigation.safeargs.kotlin'
    id 'org.jetbrains.kotlin.plugin.compose' version '2.2.0'
}

android {
    namespace 'com.freehands.assistant'
    compileSdk rootProject.ext.compileSdkVersion
    
    defaultConfig {
        applicationId "com.freehands.assistant"
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        
        buildConfigField 'String', 'VERSION_NAME', "\"${versionName}\""
        buildConfigField 'int', 'VERSION_CODE', "${versionCode}"
        
        // NDK configuration
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17 -fexceptions -frtti"
                arguments "-DANDROID_STL=c++_shared"
                cFlags "-DHAVE_NEON=1"
                cppFlags "-DHAVE_NEON=1"
            }
        }
    }
    
    buildFeatures {
        viewBinding true
        buildConfig true
        compose true
        dataBinding true
    }
    
    // Enable NDK build
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.22.1"
        }
    }
    
    // Enable prefab for native dependencies
    buildFeatures {
        prefab true
    }
    
    // Package all .so files in the final APK
    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
        
        // Pick first of any duplicate files
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libaudio_utils.so'
    }
    
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.10' // Matches Kotlin 2.2.0
    }
    
    // Java and Kotlin compatibility settings
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    // NDK version
    ndkVersion "25.2.9519653"
    
    // Kotlin compiler options
    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += [
            "-Xjvm-default=all",
            "-opt-in=kotlin.RequiresOptIn"
        ]
    }
    
    signingConfigs {
        debug {
            // Use default debug keystore that comes with Android Studio
            storeFile file("${System.getProperty('user.home')}/.android/debug.keystore")
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            // Use debug keystore for development
            storeFile file("${System.getProperty('user.home')}/.android/debug.keystore")
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    
    // Source sets configuration
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    
    // KAPT configuration for annotation processing
    kapt {
        correctErrorTypes = true
        useBuildCache = true
        
        // Room arguments
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas")
            arg("room.incremental", "true")
        }
        
        // Enable verbose KAPT logging
        // This will provide more detailed error messages
        javacOptions {
            option("-Xmaxerrs", "1000")
            option("-Xmaxwarns", "1000")
        }
    }
    
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/*.kotlin_module']
        }
        jniLibs {
            pickFirsts += ['**/libc++_shared.so']
        }
    }
    
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.3'
    }
}

// Load the NDK's toolchain when this module is included in the build
tasks.whenTaskAdded { task ->
    if (task.name.startsWith('process') && task.name.endsWith('Resources')) {
        task.dependsOn('buildCMakeDebug')
    }
}

dependencies {
    // Core Android
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.22"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.7.3'
    
    // Compose
    def composeBom = platform('androidx.compose:compose-bom:2023.10.01')
    implementation composeBom
    androidTestImplementation composeBom
    
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.runtime:runtime-livedata'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    
    // AndroidX Activity Compose
    implementation 'androidx.activity:activity-compose:1.8.0'
    
    // Lifecycle
    def lifecycle_version = "2.6.2"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    
    // Room
    def room_version = "2.6.1"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    
    // Hilt
    def hilt_version = "2.50"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    kapt "androidx.hilt:hilt-compiler:1.1.0"
    implementation 'androidx.hilt:hilt-navigation-compose:1.1.0'
    
    // Navigation
    def nav_version = "2.7.7"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.navigation:navigation-compose:$nav_version"
    
    // WorkManager
    implementation 'androidx.work:work-runtime-ktx:2.8.1'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    
    // Compose Testing
    androidTestImplementation platform('androidx.compose:compose-bom:2023.10.01')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    androidTestImplementation 'androidx.compose.ui:ui-test'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    
    // Core Library Desugaring
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
}

// Firebase and Google Services plugins removed for initial build
// Apply them when setting up Firebase
